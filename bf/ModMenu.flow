int FacilityMenuDisplay()
{
	SEL_GENERIC_MASK(0, 0);
	int selection = SEL_GENERIC_EX( 27, 8, 26, 1, 0 );
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	switch (selection)
	{
		case 0:
			CALL_VELVET_ROOM_LV();
			FADE_IN( 3, 10 );
			FADE_SYNC();
			CALL_FIELD(fieldMajor, fieldMinor, part);
			return 0;
		case 1:
			CALL_WEAPON_SHOP_LV();
			FADE_IN( 3, 10 );
			FADE_SYNC();
			CALL_FIELD(fieldMajor, fieldMinor, part);
			return 0;
		case 2:
			CALL_ITEM_SHOP_LV();
			FADE_IN( 3, 10 );
			FADE_SYNC();
			CALL_FIELD(fieldMajor, fieldMinor, part);
			return 0;
		case 3:
			CALL_ANTIQUE_SHOP_LV();
			FADE_IN( 3, 10 );
			FADE_SYNC();
			CALL_FIELD(fieldMajor, fieldMinor, part);
			return 0;
		case -1:
			return -1;
	}
	return -1;
}

int CallMenuDisplay()
{
	while(true) 
	{
		SEL_GENERIC_MASK(0, 0);
        int selection = SEL_GENERIC_EX( 9, 8, 10, 1, 0 );
		switch (selection)
		{
			case 0:
				if (FieldSelect() == -1)
					break;
				else
					return 0;
			case 1:
				if (EventSelect() == -1)
					break;
				else
					return 0;
			case 2:
				if (CmmEventSelect() == -1)
					break;
				else
					return 0;
			case 3:
				if (KeyFreeEventSelect() == -1)
					break;
				else
					return 0;
			case 4:
				if (BattleSelect() == -1)
					break;
				else
					return 0;
			case 5:
				if (BossBattleSelect() == -1)
					break;
				else
					return 0;
			case 6:
				if (DungeonSelect() == -1)
					break;
				else
					return 0;
			case 7:
				if (MovieSelect() == -1)
					break;
				else
					return 0;
			case 8:
				if (BgmSelect() == -1)
					break;
				else
					return 0;
            case -1:
                return -1;
		}
	}
	return -1;
}

int FieldSelect()
{
	int major = NumberMenu(3, 15);
	if (major == -1)
		return -1;
	int minor = NumberMenu(3, 16);
	if (minor == -1)
		return -1;
	int part = NumberMenu(2, 17);
	if (part == -1)
		return -1;
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(major, minor, part);
	return 0;
}

int EventSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int major = NumberMenu(3, 15);
	if (major == -1)
		return -1;
	int minor = NumberMenu(3, 16);
	if (minor == -1)
		return -1;
    EVT_ENABLE_SKIP_BC();
	CALL_EVENT(major, minor);
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int CmmEventSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int major = NumberMenu(3, 15);
	if (major == -1)
		return -1;
	int minor = NumberMenu(3, 16);
	if (minor == -1)
		return -1;
    EVT_ENABLE_SKIP_BC();
	CALL_EVENT_CMM(major, minor);
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int KeyFreeEventSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int major = NumberMenu(3, 15);
	if (major == -1)
		return -1;
	int minor = NumberMenu(3, 16);
	if (minor == -1)
		return -1;
	int major2 = NumberMenu(4, 15);
	if (major2 == -1)
		return -1;
	int minor2 = NumberMenu(4, 16);
	if (minor2 == -1)
		return -1;
	CALL_KEYFREE_EVENT(major, minor, major2, minor2);
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int BattleSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int major = NumberMenu(4, 15);
	if (major == -1)
		return -1;
	CALL_FIELDBATTLE(major);
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int BossBattleSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int boss = SelectBoss();
	if (boss == -1)
		return -1;
	CALL_EVENTBATTLE(0, 0, boss);
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int SelectBoss()
{
	int selection = SEL_GENERIC_EX( 59, 58, 57, 1, 0 );
	switch (selection)
	{
		case 0: return 701;
		case 1: return 702;
		case 2: return 703;
		case 3: return 704;
		case 4: return 705;
		case 5: return 706;
		case 6: return 707;
		case 7: return 715;
		case 8: return 708;
		case 9: return 716;
		case 10: return 717;
		case 11: return 718;
		case 12: return 709;
		case 13: return 710;
		case 14: return 725;
		case 15: return 727;
		case -1: return -1;
	}
	return -1;
}

int DungeonSelect()
{
	int floor = NumberMenu(3, 25);
	if (floor == -1)
		return -1;
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_DUNGEON(floor, 0, 0);
	return 0;
}

int MovieSelect()
{
	int fieldMajor = FLD_GET_MAJOR();
	int fieldMinor = FLD_GET_MINOR();
	int part = GET_FIELD_PARTS_ID();
	int movie = NumberMenu(2, 23);
	if (movie == -1)
		return -1;
	MOVIE_PLAY( movie );
    MOVIE_SYNC();
    FADE_IN( 3, 10 );
    FADE_SYNC();
	CALL_FIELD(fieldMajor, fieldMinor, part);
	return 0;
}

int BgmSelect()
{
	int bgm = NumberMenu(5, 24);
	if (bgm == -1)
		return -1;
	BGM(bgm);
	return 0;
}

int PlayerMenuDisplay()
{
	while(true) 
	{
		SEL_GENERIC_MASK(0, 0);
		int selection = SEL_GENERIC_EX( 11, 8, 12, 1, 0 );
		switch (selection)
		{
			case 0:
				if (EditPersonaDisplay() == -1)
					break;
				else
					return 0;
			case 1:
				if (EditCommuDisplay() == -1)
					break;
				else
					return 0;
			case 2:
				if (ChangeLevel() == -1)
					break;
				else
					return 0;
			case 3:
				Rename();
				return 0;
			case 4:
				if (DateSelect() == -1)
					break;
				else
					return 0;
			case 5:
				if (ChangeYen() == -1)
					break;
				else
					return 0;
			case 6:
				if (ChangeItem() == -1)
					break;
				else
					return 0;
			case 7:
				if (AddMember() == -1)
					break;
				else
					return 0;
			case 8:
				if (RemoveMember() == -1)
					break;
				else
					return 0;
			case 9:
				SetMaxHPSP();
				return 0;
			case 10:
				if (StatEdit() == -1)
					break;
				else
					return 0;
            case -1:
                return -1;
		}
	}
	return -1;
}

int EditPersonaDisplay()
{
	while(true) 
	{
		SEL_GENERIC_MASK(0, 0);
		int selection = SEL_GENERIC_EX( 51, 8, 50, 1, 0 );
		switch (selection)
		{
			case 0:
				if (AddPersona() == -1)
					break;
				else
					return 0;
			case 1:
				CLEAR_PERSONA_STOCK();
				return 0;
			case 2:
				if (ChangePersonaLevel() == -1)
					break;
				else
					return 0;
			case 3:
				if (AddSkill() == -1)
					break;
				else
					return 0;
			case 4:
				if (RemoveSkill() == -1)
					break;
				else
					return 0;
			case 5:
				if (EvolvePersona() == -1)
					break;
				else
					return 0;
            case -1:
                return -1;
		}
	}
	return -1;
}

int AddPersona()
{
	int persona = NumberMenu(3, 52);
	if (persona == -1)
		return -1;
	ADD_PERSONA_STOCK( persona );
	return 0;
}

int AddSkill()
{
	int member = SelectMember(true, true);
	if (member == -1)
		return -1;
	int persona = -1;
	// Input ID if protagonist
	if (member == 1)
		persona = NumberMenu(3, 52);
	// Check for evolution
	else if (member > 1 && member < 9)
	{
		if (CHK_PERSONA_EVOLUTION( member ))
			persona = 2 * member - 2;
		else
			persona = 2 * member - 3;
	}
	else if (member == 9)
		persona = 16;
	else if (member == 10)
		persona = 15;
	if (member == -1)
		return -1;
	if (persona == -1)
		return -1;
	int skill = NumberMenu(4, 53);
	if (skill == -1)
		return -1;
	ADD_PERSONA_SKILL(member, persona, skill);
	return 0;
}

int RemoveSkill()
{
	int member = SelectMember(true, true);
	if (member == -1)
		return -1;
	int persona = -1;
	// Input ID if protagonist
	if (member == 1)
		persona = NumberMenu(3, 52);
	// Check for evolution
	else if (member > 1 && member < 9)
	{
		if (CHK_PERSONA_EVOLUTION( member ))
			persona = 2 * member - 2;
		else
			persona = 2 * member - 3;
	}
	else if (member == 9)
		persona = 16;
	else if (member == 10)
		persona = 15;
	if (member == -1)
		return -1;
	if (persona == -1)
		return -1;
	int skill = NumberMenu(4, 53);
	if (skill == -1)
		return -1;
	REMOVE_PERSONA_SKILL(member, persona, skill);
	return 0;
}

int ChangePersonaLevel()
{
	int member = SelectMember(true, true);
	if (member == -1)
		return -1;
	int persona = -1;
	// Input ID if protagonist
	if (member == 1)
		persona = NumberMenu(3, 52);
	// Check for evolution
	else if (member > 1 && member < 9)
	{
		if (CHK_PERSONA_EVOLUTION( member ))
			persona = 2 * member - 2;
		else
			persona = 2 * member - 3;
	}
	else if (member == 9)
		persona = 16;
	else if (member == 10)
		persona = 15;
	if (member == -1)
		return -1;
	if (persona == -1)
		return -1;
	int level = NumberMenu(2, 63);
	if (level == -1)
		return -1;
	SET_PERSONA_LV(member, persona, level);
	return 0;
}

int EvolvePersona()
{
	int member = SelectMember(false, true);
	if (member == -1)
		return -1;
	PERSONA_EVOLUTION(member);
	return 0;
}

int ChangeLevel()
{
	int member = SelectMember(true, true);
	if (member == -1)
		return -1;
	int level = NumberMenu(2, 63);
	if (level == -1)
		return -1;
	SET_HUMAN_LV(member, level);
	return 0;
}

int StatEdit()
{
	SEL_GENERIC_MASK(0, 0);
	int type = SEL_GENERIC_EX( 48, 47, 46, 1, 0 );
	if (type == -1)
		return -1;
	int increment = NumberMenu(2, 49);
	if (increment == -1)
		return -1;
	switch (type)
	{
		case 0:
			HERO_PARAM_ALL_ADD_EXP(increment, 0, 0);
			break;
		case 1:
			HERO_PARAM_ALL_ADD_EXP(0, increment, 0);
			break;
		case 2:
			HERO_PARAM_ALL_ADD_EXP(0, 0, increment);
			break;
	}
	DISP_HERO_PARAM_METER();
	DISP_HERO_PARAM_RANK_UP();
	return 0;
}

int EditCommuDisplay()
{
	while(true) 
	{
		SEL_GENERIC_MASK(0, 0);
		int selection = SEL_GENERIC_EX( 71, 8, 70, 1, 0 );
		switch (selection)
		{
			case 0:
				if (AddCommu() == -1)
					break;
				else
					return 0;
			case 1:
				if (RankUpCommu() == -1)
					break;
				else
					return 0;
			case 2:
				if (ChangeCommuLevel() == -1)
					break;
				else
					return 0;
            case -1:
                return -1;
		}
	}
	return -1;
}

int AddCommu()
{
	int commu = SEL_GENERIC_EX( 66, 65, 64, 1, 0 );
	if (commu == -1)
		return -1;
	CMM_SET_LV(commu + 1, 1 );
    CMM_RANKUP( commu + 1, 0, 0 );
	return 0;
}

int RankUpCommu()
{
	int commu = SEL_GENERIC_EX( 66, 65, 64, 1, 0 );
	if (commu == -1)
		return -1;
	int rank = CMM_GET_LV( commu + 1 );
	CMM_SET_LV(commu + 1, rank + 1 );
    CMM_RANKUP( commu + 1, 1, 0 );
	return 0;
}

int ChangeCommuLevel()
{
	int commu = SEL_GENERIC_EX( 66, 65, 64, 1, 0 );
	if (commu == -1)
		return -1;
	int rank = SEL_GENERIC_EX( 68, 69, 67, 1, 0 );
	if (rank == -1)
		return -1;
	CMM_SET_LV(commu + 1, rank + 1 );
    CMM_RANKUP( commu + 1, 1, 0 );
	return 0;
}

int Rename()
{
	CALL_NAME_ENTRY();
	return 0;
}

int DateSelect()
{
	int month = ChooseMonth();
	if (month == -1)
		return -1;
	else if (month == 0)
		return 0;
	int day = NumberMenu(2, 21);
	if (day == -1)
		return -1;
    REQUEST_DAY_CHANGE_EFFECT( month, day );
    SET_NEXT_DAY( month, day, 0 );
	CALL_NEXTTIME();
	return 0;
}

int ChooseMonth()
{
	SEL_GENERIC_MASK(0, 0);
	int month = SEL_GENERIC_EX( 20, 19, 18, 1, 0 );
	if (month != 18)
		return month + 1;
	return 0;
}

int ChangeYen()
{
	int new_yen = NumberMenu(7, 22);
	if (new_yen == -1)
		return -1;
	int reset = 0 - GET_MONEY();
	CALL_ADD_MONEY(reset);
	ADD_GET_ITEM_LIST_MONEY(new_yen);
	OPEN_GET_ITEM();
	return 0;
}

int ChangeItem()
{
	int itemType = SelectItemType();
	if (itemType == -1)
		return -1;
	int item = NumberMenu(3, 28);
	if (item == -1)
		return -1;
	item = item + itemType;
	SET_MSG_VAR(0, item, 1);
	SET_MSG_VAR(1, GET_ITEM_NUM(item), 0);
	MSG_WND_DSP();
	MSG( 29, 0 );
	SEL_DEFKEY(18, 1);
	int confirm = SEL(31);
	MSG_WND_CLS();
	if (confirm == 1)
		return -1;
	int numItems = NumberMenu(2, 30);
	if (numItems == -1)
		return -1;
	ADD_GET_ITEM_LIST(item, numItems);
	OPEN_GET_ITEM();
	return 0;
}

int SelectItemType()
{
	SEL_GENERIC_MASK(0, 0);
	int itemType = SEL_GENERIC_EX( 45, 44, 43, 1, 0 );
	if (itemType == -1)
		return -1;
	return itemType * 0x1000;
}

int AddMember()
{
	int member = SelectMember(false, false);
	if (member == -1)
		return -1;
	BIT_ON( (member - 1) + 0x40000000 );
	PARTY_IN( member );
	DUNGEON_PARTNER_RELOAD();
	return 0;
}

int RemoveMember()
{
	int member = SelectMember(false, false);
	if (member == -1)
		return -1;
	BIT_OFF( (member - 1) + 0x40000000 );
	PARTY_OUT( member );
	DUNGEON_PARTNER_RELOAD();
	return 0;
}

int SelectMember(bool protag, bool fuuka)
{
	int mask = 0;
	if (!protag)
		mask = mask + 1;
	if (!fuuka)
		mask = mask + 32;
	SEL_GENERIC_MASK(mask, 0);
	int member = SEL_GENERIC_EX( 41, 40, 42, 1, 0 );
	if (member == -1)
		return -1;
	return member + 1;
}


void SetMaxHPSP()
{
	for ( int i = 0; i <= 10; i++ ) 
	{
		int currHP = GET_MAXHP(i);
		int currSP = GET_MAXSP(i);
		ADD_MAXHP_UP(i, 999 - currHP);
		ADD_MAXSP_UP(i, 999 - currSP);
		SET_HP(i, 999);
		SET_SP(i, 999);
	}
}

int FlagMenuDisplay()
{
	while(true) 
	{
		SEL_GENERIC_MASK(0, 0);
        int selection = SEL_GENERIC_EX( 33, 8, 32, 1, 0 );
		switch (selection)
		{
			case 0:
				if (ToggleFlag() == -1)
					break;
				else
					return 0;
			case 1:
				if (EditCounter() == -1)
					break;
				else
					return 0;
			case 2:
				if (EditDifficulty() == -1)
					break;
				else
					return 0;
			case 3:
				ToggleDisplay();
				return 0;
			case 4:
				SwitchNavi();
				return 0;
            case -1:
                return -1;
		}
	}
	return -1;
}

int ToggleFlag()
{
	int flagType = SelectFlagType();
	if (flagType == -1)
		return -1;
	int flag = NumberMenu(4, 37);
	if (flag == -1)
		return -1;
	int actualFlag = flag + flagType;
	SET_MSG_VAR(0, flag, 0);
	SET_MSG_VAR(1, BIT_CHK(actualFlag), 0);
	MSG_WND_DSP();
	MSG(35, 0);
	SEL_DEFKEY(18, 1);
	int toggle = SEL(34);
	MSG_WND_CLS();
	if (toggle == 0)
	{
		BIT_ON(actualFlag);
	}
	else if (toggle == 1)
	{
		BIT_OFF(actualFlag);
	}
	return 0;
}

int SelectFlagType()
{
	SEL_GENERIC_MASK(0, 0);
	int flagType = SEL_GENERIC_EX( 62, 61, 60, 1, 0 );
	if (flagType == -1)
		return -1;
	return flagType * 0x10000000;
}

int EditCounter()
{
	int countNumber = NumberMenu(3, 38);
	if (countNumber == -1)
		return -1;
	SET_MSG_VAR(0, countNumber, 0);
	SET_MSG_VAR(1, GET_COUNT(countNumber), 0);
	MSG_WND_DSP();
	MSG(36, 0);
	MSG_WND_CLS();
	int newValue = NumberMenu(5, 39);
	if (newValue != -1)
		SET_COUNT(countNumber, newValue);
	return 0;
}

int EditDifficulty()
{
	SEL_GENERIC_MASK(0, 0);
	int difficulty = SEL_GENERIC_EX( 55, 56, 54, 1, 0 );
	if (difficulty == -1)
		return -1;
	// Disable all difficulties
	BIT_OFF( ( 17 + 0x40000000 ) );
    BIT_OFF( ( 16 + 0x40000000 ) );
    BIT_OFF( ( 15 + 0x40000000 ) );
    BIT_OFF( ( 14 + 0x40000000 ) );
    BIT_OFF( ( 13 + 0x40000000 ) );
	// Enable set difficulty
    BIT_ON( ( ( 13 + 0x40000000 ) + difficulty ) );
	return 0;
}

void ToggleDisplay()
{
	for (int i = 491; i <= 496; i++)
		BIT_ON( i + 0x50000000 );
	BIT_ON( ( 115 + 0x40000000 ) );
	BTL_PARTYPANEL_HIDE();
	CLOSE_SUPPORT_PARTY_PANEL();
	SET_HIDE_MINIMAP( 1 );
	BTL_UI_HIDDEN();
}

void SwitchNavi()
{
	if (BIT_CHK( 1 + 0x30000000 ))
	{
		BIT_OFF( 1 + 0x30000000 );
		BIT_ON( 5 + 0x30000000 );
	}
	else if (BIT_CHK( 5 + 0x30000000 ))
	{
		BIT_OFF( 5 + 0x30000000 );
		BIT_ON( 1 + 0x30000000 );
	}
}

int NumberMenu(int digitCount, int nameMsgId)
{
    int number = 0;

    for (int i = 0; i < digitCount; i++)
    {
		SET_MSG_VAR(0, digitCount, 0);
		SEL_GENERIC_MASK(0, 0);
        int digit = SEL_GENERIC_EX( nameMsgId, 14, 13, 1, 0 );

        if (digit == -1)
        {
            // Returns -1 if cancelled before any number has been entered
            if (i == 0)
            {
                return -1;
            }
            else
                break;
        }

        number *= 10;
        number += digit;
    }

    return number;
}